/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index/Index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/marked/lib/marked.js":
/*!*******************************************!*\
  !*** ./node_modules/marked/lib/marked.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\r\n * marked - a markdown parser\r\n * Copyright (c) 2011-2020, Christopher Jeffrey. (MIT Licensed)\r\n * https://github.com/markedjs/marked\r\n */\r\n\r\n/**\r\n * DO NOT EDIT THIS FILE\r\n * The code in this file is generated from files in ./src/\r\n */\r\n\r\n(function (global, factory) {\r\n   true ? module.exports = factory() :\r\n  undefined;\r\n}(this, (function () { 'use strict';\r\n\r\n  function _defineProperties(target, props) {\r\n    for (var i = 0; i < props.length; i++) {\r\n      var descriptor = props[i];\r\n      descriptor.enumerable = descriptor.enumerable || false;\r\n      descriptor.configurable = true;\r\n      if (\"value\" in descriptor) descriptor.writable = true;\r\n      Object.defineProperty(target, descriptor.key, descriptor);\r\n    }\r\n  }\r\n\r\n  function _createClass(Constructor, protoProps, staticProps) {\r\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\r\n    if (staticProps) _defineProperties(Constructor, staticProps);\r\n    return Constructor;\r\n  }\r\n\r\n  function _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) return;\r\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n  }\r\n\r\n  function _arrayLikeToArray(arr, len) {\r\n    if (len == null || len > arr.length) len = arr.length;\r\n\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\r\n\r\n    return arr2;\r\n  }\r\n\r\n  function _createForOfIteratorHelperLoose(o) {\r\n    var i = 0;\r\n\r\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\r\n      if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {\r\n        if (i >= o.length) return {\r\n          done: true\r\n        };\r\n        return {\r\n          done: false,\r\n          value: o[i++]\r\n        };\r\n      };\r\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n    }\r\n\r\n    i = o[Symbol.iterator]();\r\n    return i.next.bind(i);\r\n  }\r\n\r\n  function createCommonjsModule(fn, module) {\r\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\r\n  }\r\n\r\n  var defaults = createCommonjsModule(function (module) {\r\n    function getDefaults() {\r\n      return {\r\n        baseUrl: null,\r\n        breaks: false,\r\n        gfm: true,\r\n        headerIds: true,\r\n        headerPrefix: '',\r\n        highlight: null,\r\n        langPrefix: 'language-',\r\n        mangle: true,\r\n        pedantic: false,\r\n        renderer: null,\r\n        sanitize: false,\r\n        sanitizer: null,\r\n        silent: false,\r\n        smartLists: false,\r\n        smartypants: false,\r\n        tokenizer: null,\r\n        walkTokens: null,\r\n        xhtml: false\r\n      };\r\n    }\r\n\r\n    function changeDefaults(newDefaults) {\r\n      module.exports.defaults = newDefaults;\r\n    }\r\n\r\n    module.exports = {\r\n      defaults: getDefaults(),\r\n      getDefaults: getDefaults,\r\n      changeDefaults: changeDefaults\r\n    };\r\n  });\r\n  var defaults_1 = defaults.defaults;\r\n  var defaults_2 = defaults.getDefaults;\r\n  var defaults_3 = defaults.changeDefaults;\r\n\r\n  /**\r\n   * Helpers\r\n   */\r\n  var escapeTest = /[&<>\"']/;\r\n  var escapeReplace = /[&<>\"']/g;\r\n  var escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\r\n  var escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\r\n  var escapeReplacements = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;'\r\n  };\r\n\r\n  var getEscapeReplacement = function getEscapeReplacement(ch) {\r\n    return escapeReplacements[ch];\r\n  };\r\n\r\n  function escape(html, encode) {\r\n    if (encode) {\r\n      if (escapeTest.test(html)) {\r\n        return html.replace(escapeReplace, getEscapeReplacement);\r\n      }\r\n    } else {\r\n      if (escapeTestNoEncode.test(html)) {\r\n        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\r\n      }\r\n    }\r\n\r\n    return html;\r\n  }\r\n\r\n  var unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\r\n\r\n  function unescape(html) {\r\n    // explicitly match decimal, hex, and named HTML entities\r\n    return html.replace(unescapeTest, function (_, n) {\r\n      n = n.toLowerCase();\r\n      if (n === 'colon') return ':';\r\n\r\n      if (n.charAt(0) === '#') {\r\n        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\r\n      }\r\n\r\n      return '';\r\n    });\r\n  }\r\n\r\n  var caret = /(^|[^\\[])\\^/g;\r\n\r\n  function edit(regex, opt) {\r\n    regex = regex.source || regex;\r\n    opt = opt || '';\r\n    var obj = {\r\n      replace: function replace(name, val) {\r\n        val = val.source || val;\r\n        val = val.replace(caret, '$1');\r\n        regex = regex.replace(name, val);\r\n        return obj;\r\n      },\r\n      getRegex: function getRegex() {\r\n        return new RegExp(regex, opt);\r\n      }\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  var nonWordAndColonTest = /[^\\w:]/g;\r\n  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\r\n\r\n  function cleanUrl(sanitize, base, href) {\r\n    if (sanitize) {\r\n      var prot;\r\n\r\n      try {\r\n        prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n\r\n      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (base && !originIndependentUrl.test(href)) {\r\n      href = resolveUrl(base, href);\r\n    }\r\n\r\n    try {\r\n      href = encodeURI(href).replace(/%25/g, '%');\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n\r\n    return href;\r\n  }\r\n\r\n  var baseUrls = {};\r\n  var justDomain = /^[^:]+:\\/*[^/]*$/;\r\n  var protocol = /^([^:]+:)[\\s\\S]*$/;\r\n  var domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\r\n\r\n  function resolveUrl(base, href) {\r\n    if (!baseUrls[' ' + base]) {\r\n      // we can ignore everything in base after the last slash of its path component,\r\n      // but we might need to add _that_\r\n      // https://tools.ietf.org/html/rfc3986#section-3\r\n      if (justDomain.test(base)) {\r\n        baseUrls[' ' + base] = base + '/';\r\n      } else {\r\n        baseUrls[' ' + base] = rtrim(base, '/', true);\r\n      }\r\n    }\r\n\r\n    base = baseUrls[' ' + base];\r\n    var relativeBase = base.indexOf(':') === -1;\r\n\r\n    if (href.substring(0, 2) === '//') {\r\n      if (relativeBase) {\r\n        return href;\r\n      }\r\n\r\n      return base.replace(protocol, '$1') + href;\r\n    } else if (href.charAt(0) === '/') {\r\n      if (relativeBase) {\r\n        return href;\r\n      }\r\n\r\n      return base.replace(domain, '$1') + href;\r\n    } else {\r\n      return base + href;\r\n    }\r\n  }\r\n\r\n  var noopTest = {\r\n    exec: function noopTest() {}\r\n  };\r\n\r\n  function merge(obj) {\r\n    var i = 1,\r\n        target,\r\n        key;\r\n\r\n    for (; i < arguments.length; i++) {\r\n      target = arguments[i];\r\n\r\n      for (key in target) {\r\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\r\n          obj[key] = target[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  function splitCells(tableRow, count) {\r\n    // ensure that every cell-delimiting pipe has a space\r\n    // before it to distinguish it from an escaped pipe\r\n    var row = tableRow.replace(/\\|/g, function (match, offset, str) {\r\n      var escaped = false,\r\n          curr = offset;\r\n\r\n      while (--curr >= 0 && str[curr] === '\\\\') {\r\n        escaped = !escaped;\r\n      }\r\n\r\n      if (escaped) {\r\n        // odd number of slashes means | is escaped\r\n        // so we leave it alone\r\n        return '|';\r\n      } else {\r\n        // add space before unescaped |\r\n        return ' |';\r\n      }\r\n    }),\r\n        cells = row.split(/ \\|/);\r\n    var i = 0;\r\n\r\n    if (cells.length > count) {\r\n      cells.splice(count);\r\n    } else {\r\n      while (cells.length < count) {\r\n        cells.push('');\r\n      }\r\n    }\r\n\r\n    for (; i < cells.length; i++) {\r\n      // leading or trailing whitespace is ignored per the gfm spec\r\n      cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\r\n    }\r\n\r\n    return cells;\r\n  } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\r\n  // /c*$/ is vulnerable to REDOS.\r\n  // invert: Remove suffix of non-c chars instead. Default falsey.\r\n\r\n\r\n  function rtrim(str, c, invert) {\r\n    var l = str.length;\r\n\r\n    if (l === 0) {\r\n      return '';\r\n    } // Length of suffix matching the invert condition.\r\n\r\n\r\n    var suffLen = 0; // Step left until we fail to match the invert condition.\r\n\r\n    while (suffLen < l) {\r\n      var currChar = str.charAt(l - suffLen - 1);\r\n\r\n      if (currChar === c && !invert) {\r\n        suffLen++;\r\n      } else if (currChar !== c && invert) {\r\n        suffLen++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return str.substr(0, l - suffLen);\r\n  }\r\n\r\n  function findClosingBracket(str, b) {\r\n    if (str.indexOf(b[1]) === -1) {\r\n      return -1;\r\n    }\r\n\r\n    var l = str.length;\r\n    var level = 0,\r\n        i = 0;\r\n\r\n    for (; i < l; i++) {\r\n      if (str[i] === '\\\\') {\r\n        i++;\r\n      } else if (str[i] === b[0]) {\r\n        level++;\r\n      } else if (str[i] === b[1]) {\r\n        level--;\r\n\r\n        if (level < 0) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  function checkSanitizeDeprecation(opt) {\r\n    if (opt && opt.sanitize && !opt.silent) {\r\n      console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\r\n    }\r\n  }\r\n\r\n  var helpers = {\r\n    escape: escape,\r\n    unescape: unescape,\r\n    edit: edit,\r\n    cleanUrl: cleanUrl,\r\n    resolveUrl: resolveUrl,\r\n    noopTest: noopTest,\r\n    merge: merge,\r\n    splitCells: splitCells,\r\n    rtrim: rtrim,\r\n    findClosingBracket: findClosingBracket,\r\n    checkSanitizeDeprecation: checkSanitizeDeprecation\r\n  };\r\n\r\n  var defaults$1 = defaults.defaults;\r\n  var rtrim$1 = helpers.rtrim,\r\n      splitCells$1 = helpers.splitCells,\r\n      _escape = helpers.escape,\r\n      findClosingBracket$1 = helpers.findClosingBracket;\r\n\r\n  function outputLink(cap, link, raw) {\r\n    var href = link.href;\r\n    var title = link.title ? _escape(link.title) : null;\r\n\r\n    if (cap[0].charAt(0) !== '!') {\r\n      return {\r\n        type: 'link',\r\n        raw: raw,\r\n        href: href,\r\n        title: title,\r\n        text: cap[1]\r\n      };\r\n    } else {\r\n      return {\r\n        type: 'image',\r\n        raw: raw,\r\n        text: _escape(cap[1]),\r\n        href: href,\r\n        title: title\r\n      };\r\n    }\r\n  }\r\n\r\n  function indentCodeCompensation(raw, text) {\r\n    var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\r\n\r\n    if (matchIndentToCode === null) {\r\n      return text;\r\n    }\r\n\r\n    var indentToCode = matchIndentToCode[1];\r\n    return text.split('\\n').map(function (node) {\r\n      var matchIndentInNode = node.match(/^\\s+/);\r\n\r\n      if (matchIndentInNode === null) {\r\n        return node;\r\n      }\r\n\r\n      var indentInNode = matchIndentInNode[0];\r\n\r\n      if (indentInNode.length >= indentToCode.length) {\r\n        return node.slice(indentToCode.length);\r\n      }\r\n\r\n      return node;\r\n    }).join('\\n');\r\n  }\r\n  /**\r\n   * Tokenizer\r\n   */\r\n\r\n\r\n  var Tokenizer_1 = /*#__PURE__*/function () {\r\n    function Tokenizer(options) {\r\n      this.options = options || defaults$1;\r\n    }\r\n\r\n    var _proto = Tokenizer.prototype;\r\n\r\n    _proto.space = function space(src) {\r\n      var cap = this.rules.block.newline.exec(src);\r\n\r\n      if (cap) {\r\n        if (cap[0].length > 1) {\r\n          return {\r\n            type: 'space',\r\n            raw: cap[0]\r\n          };\r\n        }\r\n\r\n        return {\r\n          raw: '\\n'\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.code = function code(src, tokens) {\r\n      var cap = this.rules.block.code.exec(src);\r\n\r\n      if (cap) {\r\n        var lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\r\n\r\n        if (lastToken && lastToken.type === 'paragraph') {\r\n          return {\r\n            raw: cap[0],\r\n            text: cap[0].trimRight()\r\n          };\r\n        }\r\n\r\n        var text = cap[0].replace(/^ {4}/gm, '');\r\n        return {\r\n          type: 'code',\r\n          raw: cap[0],\r\n          codeBlockStyle: 'indented',\r\n          text: !this.options.pedantic ? rtrim$1(text, '\\n') : text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.fences = function fences(src) {\r\n      var cap = this.rules.block.fences.exec(src);\r\n\r\n      if (cap) {\r\n        var raw = cap[0];\r\n        var text = indentCodeCompensation(raw, cap[3] || '');\r\n        return {\r\n          type: 'code',\r\n          raw: raw,\r\n          lang: cap[2] ? cap[2].trim() : cap[2],\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.heading = function heading(src) {\r\n      var cap = this.rules.block.heading.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'heading',\r\n          raw: cap[0],\r\n          depth: cap[1].length,\r\n          text: cap[2]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.nptable = function nptable(src) {\r\n      var cap = this.rules.block.nptable.exec(src);\r\n\r\n      if (cap) {\r\n        var item = {\r\n          type: 'table',\r\n          header: splitCells$1(cap[1].replace(/^ *| *\\| *$/g, '')),\r\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n          cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : [],\r\n          raw: cap[0]\r\n        };\r\n\r\n        if (item.header.length === item.align.length) {\r\n          var l = item.align.length;\r\n          var i;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            if (/^ *-+: *$/.test(item.align[i])) {\r\n              item.align[i] = 'right';\r\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n              item.align[i] = 'center';\r\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n              item.align[i] = 'left';\r\n            } else {\r\n              item.align[i] = null;\r\n            }\r\n          }\r\n\r\n          l = item.cells.length;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            item.cells[i] = splitCells$1(item.cells[i], item.header.length);\r\n          }\r\n\r\n          return item;\r\n        }\r\n      }\r\n    };\r\n\r\n    _proto.hr = function hr(src) {\r\n      var cap = this.rules.block.hr.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'hr',\r\n          raw: cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.blockquote = function blockquote(src) {\r\n      var cap = this.rules.block.blockquote.exec(src);\r\n\r\n      if (cap) {\r\n        var text = cap[0].replace(/^ *> ?/gm, '');\r\n        return {\r\n          type: 'blockquote',\r\n          raw: cap[0],\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.list = function list(src) {\r\n      var cap = this.rules.block.list.exec(src);\r\n\r\n      if (cap) {\r\n        var raw = cap[0];\r\n        var bull = cap[2];\r\n        var isordered = bull.length > 1;\r\n        var list = {\r\n          type: 'list',\r\n          raw: raw,\r\n          ordered: isordered,\r\n          start: isordered ? +bull : '',\r\n          loose: false,\r\n          items: []\r\n        }; // Get each top-level item.\r\n\r\n        var itemMatch = cap[0].match(this.rules.block.item);\r\n        var next = false,\r\n            item,\r\n            space,\r\n            b,\r\n            addBack,\r\n            loose,\r\n            istask,\r\n            ischecked;\r\n        var l = itemMatch.length;\r\n\r\n        for (var i = 0; i < l; i++) {\r\n          item = itemMatch[i];\r\n          raw = item; // Remove the list item's bullet\r\n          // so it is seen as the next token.\r\n\r\n          space = item.length;\r\n          item = item.replace(/^ *([*+-]|\\d+\\.) */, ''); // Outdent whatever the\r\n          // list item contains. Hacky.\r\n\r\n          if (~item.indexOf('\\n ')) {\r\n            space -= item.length;\r\n            item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');\r\n          } // Determine whether the next list item belongs here.\r\n          // Backpedal if it does not belong in this list.\r\n\r\n\r\n          if (i !== l - 1) {\r\n            b = this.rules.block.bullet.exec(itemMatch[i + 1])[0];\r\n\r\n            if (bull.length > 1 ? b.length === 1 : b.length > 1 || this.options.smartLists && b !== bull) {\r\n              addBack = itemMatch.slice(i + 1).join('\\n');\r\n              list.raw = list.raw.substring(0, list.raw.length - addBack.length);\r\n              i = l - 1;\r\n            }\r\n          } // Determine whether item is loose or not.\r\n          // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\r\n          // for discount behavior.\r\n\r\n\r\n          loose = next || /\\n\\n(?!\\s*$)/.test(item);\r\n\r\n          if (i !== l - 1) {\r\n            next = item.charAt(item.length - 1) === '\\n';\r\n            if (!loose) loose = next;\r\n          }\r\n\r\n          if (loose) {\r\n            list.loose = true;\r\n          } // Check for task list items\r\n\r\n\r\n          istask = /^\\[[ xX]\\] /.test(item);\r\n          ischecked = undefined;\r\n\r\n          if (istask) {\r\n            ischecked = item[1] !== ' ';\r\n            item = item.replace(/^\\[[ xX]\\] +/, '');\r\n          }\r\n\r\n          list.items.push({\r\n            type: 'list_item',\r\n            raw: raw,\r\n            task: istask,\r\n            checked: ischecked,\r\n            loose: loose,\r\n            text: item\r\n          });\r\n        }\r\n\r\n        return list;\r\n      }\r\n    };\r\n\r\n    _proto.html = function html(src) {\r\n      var cap = this.rules.block.html.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: this.options.sanitize ? 'paragraph' : 'html',\r\n          raw: cap[0],\r\n          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\r\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.def = function def(src) {\r\n      var cap = this.rules.block.def.exec(src);\r\n\r\n      if (cap) {\r\n        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\r\n        var tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\r\n        return {\r\n          tag: tag,\r\n          raw: cap[0],\r\n          href: cap[2],\r\n          title: cap[3]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.table = function table(src) {\r\n      var cap = this.rules.block.table.exec(src);\r\n\r\n      if (cap) {\r\n        var item = {\r\n          type: 'table',\r\n          header: splitCells$1(cap[1].replace(/^ *| *\\| *$/g, '')),\r\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n          cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\r\n        };\r\n\r\n        if (item.header.length === item.align.length) {\r\n          item.raw = cap[0];\r\n          var l = item.align.length;\r\n          var i;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            if (/^ *-+: *$/.test(item.align[i])) {\r\n              item.align[i] = 'right';\r\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n              item.align[i] = 'center';\r\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n              item.align[i] = 'left';\r\n            } else {\r\n              item.align[i] = null;\r\n            }\r\n          }\r\n\r\n          l = item.cells.length;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            item.cells[i] = splitCells$1(item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''), item.header.length);\r\n          }\r\n\r\n          return item;\r\n        }\r\n      }\r\n    };\r\n\r\n    _proto.lheading = function lheading(src) {\r\n      var cap = this.rules.block.lheading.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'heading',\r\n          raw: cap[0],\r\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\r\n          text: cap[1]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.paragraph = function paragraph(src) {\r\n      var cap = this.rules.block.paragraph.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'paragraph',\r\n          raw: cap[0],\r\n          text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.text = function text(src, tokens) {\r\n      var cap = this.rules.block.text.exec(src);\r\n\r\n      if (cap) {\r\n        var lastToken = tokens[tokens.length - 1];\r\n\r\n        if (lastToken && lastToken.type === 'text') {\r\n          return {\r\n            raw: cap[0],\r\n            text: cap[0]\r\n          };\r\n        }\r\n\r\n        return {\r\n          type: 'text',\r\n          raw: cap[0],\r\n          text: cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.escape = function escape(src) {\r\n      var cap = this.rules.inline.escape.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'escape',\r\n          raw: cap[0],\r\n          text: _escape(cap[1])\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.tag = function tag(src, inLink, inRawBlock) {\r\n      var cap = this.rules.inline.tag.exec(src);\r\n\r\n      if (cap) {\r\n        if (!inLink && /^<a /i.test(cap[0])) {\r\n          inLink = true;\r\n        } else if (inLink && /^<\\/a>/i.test(cap[0])) {\r\n          inLink = false;\r\n        }\r\n\r\n        if (!inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\r\n          inRawBlock = true;\r\n        } else if (inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\r\n          inRawBlock = false;\r\n        }\r\n\r\n        return {\r\n          type: this.options.sanitize ? 'text' : 'html',\r\n          raw: cap[0],\r\n          inLink: inLink,\r\n          inRawBlock: inRawBlock,\r\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.link = function link(src) {\r\n      var cap = this.rules.inline.link.exec(src);\r\n\r\n      if (cap) {\r\n        var lastParenIndex = findClosingBracket$1(cap[2], '()');\r\n\r\n        if (lastParenIndex > -1) {\r\n          var start = cap[0].indexOf('!') === 0 ? 5 : 4;\r\n          var linkLen = start + cap[1].length + lastParenIndex;\r\n          cap[2] = cap[2].substring(0, lastParenIndex);\r\n          cap[0] = cap[0].substring(0, linkLen).trim();\r\n          cap[3] = '';\r\n        }\r\n\r\n        var href = cap[2];\r\n        var title = '';\r\n\r\n        if (this.options.pedantic) {\r\n          var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\r\n\r\n          if (link) {\r\n            href = link[1];\r\n            title = link[3];\r\n          } else {\r\n            title = '';\r\n          }\r\n        } else {\r\n          title = cap[3] ? cap[3].slice(1, -1) : '';\r\n        }\r\n\r\n        href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\r\n        var token = outputLink(cap, {\r\n          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\r\n          title: title ? title.replace(this.rules.inline._escapes, '$1') : title\r\n        }, cap[0]);\r\n        return token;\r\n      }\r\n    };\r\n\r\n    _proto.reflink = function reflink(src, links) {\r\n      var cap;\r\n\r\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\r\n        var link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\r\n        link = links[link.toLowerCase()];\r\n\r\n        if (!link || !link.href) {\r\n          var text = cap[0].charAt(0);\r\n          return {\r\n            type: 'text',\r\n            raw: text,\r\n            text: text\r\n          };\r\n        }\r\n\r\n        var token = outputLink(cap, link, cap[0]);\r\n        return token;\r\n      }\r\n    };\r\n\r\n    _proto.strong = function strong(src) {\r\n      var cap = this.rules.inline.strong.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'strong',\r\n          raw: cap[0],\r\n          text: cap[4] || cap[3] || cap[2] || cap[1]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.em = function em(src) {\r\n      var cap = this.rules.inline.em.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'em',\r\n          raw: cap[0],\r\n          text: cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.codespan = function codespan(src) {\r\n      var cap = this.rules.inline.code.exec(src);\r\n\r\n      if (cap) {\r\n        var text = cap[2].replace(/\\n/g, ' ');\r\n        var hasNonSpaceChars = /[^ ]/.test(text);\r\n        var hasSpaceCharsOnBothEnds = text.startsWith(' ') && text.endsWith(' ');\r\n\r\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\r\n          text = text.substring(1, text.length - 1);\r\n        }\r\n\r\n        text = _escape(text, true);\r\n        return {\r\n          type: 'codespan',\r\n          raw: cap[0],\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.br = function br(src) {\r\n      var cap = this.rules.inline.br.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'br',\r\n          raw: cap[0]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.del = function del(src) {\r\n      var cap = this.rules.inline.del.exec(src);\r\n\r\n      if (cap) {\r\n        return {\r\n          type: 'del',\r\n          raw: cap[0],\r\n          text: cap[1]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.autolink = function autolink(src, mangle) {\r\n      var cap = this.rules.inline.autolink.exec(src);\r\n\r\n      if (cap) {\r\n        var text, href;\r\n\r\n        if (cap[2] === '@') {\r\n          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\r\n          href = 'mailto:' + text;\r\n        } else {\r\n          text = _escape(cap[1]);\r\n          href = text;\r\n        }\r\n\r\n        return {\r\n          type: 'link',\r\n          raw: cap[0],\r\n          text: text,\r\n          href: href,\r\n          tokens: [{\r\n            type: 'text',\r\n            raw: text,\r\n            text: text\r\n          }]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.url = function url(src, mangle) {\r\n      var cap;\r\n\r\n      if (cap = this.rules.inline.url.exec(src)) {\r\n        var text, href;\r\n\r\n        if (cap[2] === '@') {\r\n          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\r\n          href = 'mailto:' + text;\r\n        } else {\r\n          // do extended autolink path validation\r\n          var prevCapZero;\r\n\r\n          do {\r\n            prevCapZero = cap[0];\r\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\r\n          } while (prevCapZero !== cap[0]);\r\n\r\n          text = _escape(cap[0]);\r\n\r\n          if (cap[1] === 'www.') {\r\n            href = 'http://' + text;\r\n          } else {\r\n            href = text;\r\n          }\r\n        }\r\n\r\n        return {\r\n          type: 'link',\r\n          raw: cap[0],\r\n          text: text,\r\n          href: href,\r\n          tokens: [{\r\n            type: 'text',\r\n            raw: text,\r\n            text: text\r\n          }]\r\n        };\r\n      }\r\n    };\r\n\r\n    _proto.inlineText = function inlineText(src, inRawBlock, smartypants) {\r\n      var cap = this.rules.inline.text.exec(src);\r\n\r\n      if (cap) {\r\n        var text;\r\n\r\n        if (inRawBlock) {\r\n          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];\r\n        } else {\r\n          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\r\n        }\r\n\r\n        return {\r\n          type: 'text',\r\n          raw: cap[0],\r\n          text: text\r\n        };\r\n      }\r\n    };\r\n\r\n    return Tokenizer;\r\n  }();\r\n\r\n  var noopTest$1 = helpers.noopTest,\r\n      edit$1 = helpers.edit,\r\n      merge$1 = helpers.merge;\r\n  /**\r\n   * Block-Level Grammar\r\n   */\r\n\r\n  var block = {\r\n    newline: /^\\n+/,\r\n    code: /^( {4}[^\\n]+\\n*)+/,\r\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?:\\n+|$)|$)/,\r\n    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\r\n    heading: /^ {0,3}(#{1,6}) +([^\\n]*?)(?: +#+)? *(?:\\n+|$)/,\r\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\r\n    list: /^( {0,3})(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\r\n    html: '^ {0,3}(?:' // optional indentation\r\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\r\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\r\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\r\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\r\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\r\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\r\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\r\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\r\n    + ')',\r\n    def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\r\n    nptable: noopTest$1,\r\n    table: noopTest$1,\r\n    lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\r\n    // regex template, placeholders will be replaced according to different paragraph\r\n    // interruption rules of commonmark and the original markdown spec:\r\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\\n]+)*)/,\r\n    text: /^[^\\n]+/\r\n  };\r\n  block._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\r\n  block._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\r\n  block.def = edit$1(block.def).replace('label', block._label).replace('title', block._title).getRegex();\r\n  block.bullet = /(?:[*+-]|\\d{1,9}\\.)/;\r\n  block.item = /^( *)(bull) ?[^\\n]*(?:\\n(?!\\1bull ?)[^\\n]*)*/;\r\n  block.item = edit$1(block.item, 'gm').replace(/bull/g, block.bullet).getRegex();\r\n  block.list = edit$1(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\r\n  block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\r\n  block._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\r\n  block.html = edit$1(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\r\n  block.paragraph = edit$1(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\r\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n  block.blockquote = edit$1(block.blockquote).replace('paragraph', block.paragraph).getRegex();\r\n  /**\r\n   * Normal Block Grammar\r\n   */\r\n\r\n  block.normal = merge$1({}, block);\r\n  /**\r\n   * GFM Block Grammar\r\n   */\r\n\r\n  block.gfm = merge$1({}, block.normal, {\r\n    nptable: '^ *([^|\\\\n ].*\\\\|.*)\\\\n' // Header\r\n    + ' *([-:]+ *\\\\|[-| :]*)' // Align\r\n    + '(?:\\\\n((?:(?!\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)',\r\n    // Cells\r\n    table: '^ *\\\\|(.+)\\\\n' // Header\r\n    + ' *\\\\|?( *[-:]+[-| :]*)' // Align\r\n    + '(?:\\\\n *((?:(?!\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\r\n\r\n  });\r\n  block.gfm.nptable = edit$1(block.gfm.nptable).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n  block.gfm.table = edit$1(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\r\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\r\n  .getRegex();\r\n  /**\r\n   * Pedantic grammar (original John Gruber's loose markdown specification)\r\n   */\r\n\r\n  block.pedantic = merge$1({}, block.normal, {\r\n    html: edit$1('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\r\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\r\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\r\n    heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\r\n    fences: noopTest$1,\r\n    // fences not supported\r\n    paragraph: edit$1(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\r\n  });\r\n  /**\r\n   * Inline-Level Grammar\r\n   */\r\n\r\n  var inline = {\r\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\r\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\r\n    url: noopTest$1,\r\n    tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\r\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\r\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\r\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\r\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\r\n    // CDATA section\r\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\r\n    reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\r\n    nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\r\n    strong: /^__([^\\s_])__(?!_)|^\\*\\*([^\\s*])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\r\n    em: /^_([^\\s_])_(?!_)|^_([^\\s_<][\\s\\S]*?[^\\s_])_(?!_|[^\\s,punctuation])|^_([^\\s_<][\\s\\S]*?[^\\s])_(?!_|[^\\s,punctuation])|^\\*([^\\s*<\\[])\\*(?!\\*)|^\\*([^\\s<\"][\\s\\S]*?[^\\s\\[\\*])\\*(?![\\]`punctuation])|^\\*([^\\s*\"<\\[][\\s\\S]*[^\\s])\\*(?!\\*)/,\r\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\r\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\r\n    del: noopTest$1,\r\n    text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*]|\\b_|$)|[^ ](?= {2,}\\n))|(?= {2,}\\n))/\r\n  }; // list of punctuation marks from common mark spec\r\n  // without ` and ] to workaround Rule 17 (inline code blocks/links)\r\n  // without , to work around example 393\r\n\r\n  inline._punctuation = '!\"#$%&\\'()*+\\\\-./:;<=>?@\\\\[^_{|}~';\r\n  inline.em = edit$1(inline.em).replace(/punctuation/g, inline._punctuation).getRegex();\r\n  inline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\r\n  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\r\n  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\r\n  inline.autolink = edit$1(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\r\n  inline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\r\n  inline.tag = edit$1(inline.tag).replace('comment', block._comment).replace('attribute', inline._attribute).getRegex();\r\n  inline._label = /(?:\\[[^\\[\\]]*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\r\n  inline._href = /<(?:\\\\[<>]?|[^\\s<>\\\\])*>|[^\\s\\x00-\\x1f]*/;\r\n  inline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\r\n  inline.link = edit$1(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\r\n  inline.reflink = edit$1(inline.reflink).replace('label', inline._label).getRegex();\r\n  /**\r\n   * Normal Inline Grammar\r\n   */\r\n\r\n  inline.normal = merge$1({}, inline);\r\n  /**\r\n   * Pedantic Inline Grammar\r\n   */\r\n\r\n  inline.pedantic = merge$1({}, inline.normal, {\r\n    strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\r\n    em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\r\n    link: edit$1(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\r\n    reflink: edit$1(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\r\n  });\r\n  /**\r\n   * GFM Inline Grammar\r\n   */\r\n\r\n  inline.gfm = merge$1({}, inline.normal, {\r\n    escape: edit$1(inline.escape).replace('])', '~|])').getRegex(),\r\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\r\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\r\n    _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\r\n    del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\r\n    text: /^(`+|[^`])(?:[\\s\\S]*?(?:(?=[\\\\<!\\[`*~]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))|(?= {2,}\\n|[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))/\r\n  });\r\n  inline.gfm.url = edit$1(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\r\n  /**\r\n   * GFM + Line Breaks Inline Grammar\r\n   */\r\n\r\n  inline.breaks = merge$1({}, inline.gfm, {\r\n    br: edit$1(inline.br).replace('{2,}', '*').getRegex(),\r\n    text: edit$1(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\r\n  });\r\n  var rules = {\r\n    block: block,\r\n    inline: inline\r\n  };\r\n\r\n  var defaults$2 = defaults.defaults;\r\n  var block$1 = rules.block,\r\n      inline$1 = rules.inline;\r\n  /**\r\n   * smartypants text replacement\r\n   */\r\n\r\n  function smartypants(text) {\r\n    return text // em-dashes\r\n    .replace(/---/g, \"\\u2014\") // en-dashes\r\n    .replace(/--/g, \"\\u2013\") // opening singles\r\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\") // closing singles & apostrophes\r\n    .replace(/'/g, \"\\u2019\") // opening doubles\r\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\") // closing doubles\r\n    .replace(/\"/g, \"\\u201D\") // ellipses\r\n    .replace(/\\.{3}/g, \"\\u2026\");\r\n  }\r\n  /**\r\n   * mangle email addresses\r\n   */\r\n\r\n\r\n  function mangle(text) {\r\n    var out = '',\r\n        i,\r\n        ch;\r\n    var l = text.length;\r\n\r\n    for (i = 0; i < l; i++) {\r\n      ch = text.charCodeAt(i);\r\n\r\n      if (Math.random() > 0.5) {\r\n        ch = 'x' + ch.toString(16);\r\n      }\r\n\r\n      out += '&#' + ch + ';';\r\n    }\r\n\r\n    return out;\r\n  }\r\n  /**\r\n   * Block Lexer\r\n   */\r\n\r\n\r\n  var Lexer_1 = /*#__PURE__*/function () {\r\n    function Lexer(options) {\r\n      this.tokens = [];\r\n      this.tokens.links = Object.create(null);\r\n      this.options = options || defaults$2;\r\n      this.options.tokenizer = this.options.tokenizer || new Tokenizer_1();\r\n      this.tokenizer = this.options.tokenizer;\r\n      this.tokenizer.options = this.options;\r\n      var rules = {\r\n        block: block$1.normal,\r\n        inline: inline$1.normal\r\n      };\r\n\r\n      if (this.options.pedantic) {\r\n        rules.block = block$1.pedantic;\r\n        rules.inline = inline$1.pedantic;\r\n      } else if (this.options.gfm) {\r\n        rules.block = block$1.gfm;\r\n\r\n        if (this.options.breaks) {\r\n          rules.inline = inline$1.breaks;\r\n        } else {\r\n          rules.inline = inline$1.gfm;\r\n        }\r\n      }\r\n\r\n      this.tokenizer.rules = rules;\r\n    }\r\n    /**\r\n     * Expose Rules\r\n     */\r\n\r\n\r\n    /**\r\n     * Static Lex Method\r\n     */\r\n    Lexer.lex = function lex(src, options) {\r\n      var lexer = new Lexer(options);\r\n      return lexer.lex(src);\r\n    }\r\n    /**\r\n     * Preprocessing\r\n     */\r\n    ;\r\n\r\n    var _proto = Lexer.prototype;\r\n\r\n    _proto.lex = function lex(src) {\r\n      src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ');\r\n      this.blockTokens(src, this.tokens, true);\r\n      this.inline(this.tokens);\r\n      return this.tokens;\r\n    }\r\n    /**\r\n     * Lexing\r\n     */\r\n    ;\r\n\r\n    _proto.blockTokens = function blockTokens(src, tokens, top) {\r\n      if (tokens === void 0) {\r\n        tokens = [];\r\n      }\r\n\r\n      if (top === void 0) {\r\n        top = true;\r\n      }\r\n\r\n      src = src.replace(/^ +$/gm, '');\r\n      var token, i, l, lastToken;\r\n\r\n      while (src) {\r\n        // newline\r\n        if (token = this.tokenizer.space(src)) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (token.type) {\r\n            tokens.push(token);\r\n          }\r\n\r\n          continue;\r\n        } // code\r\n\r\n\r\n        if (token = this.tokenizer.code(src, tokens)) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (token.type) {\r\n            tokens.push(token);\r\n          } else {\r\n            lastToken = tokens[tokens.length - 1];\r\n            lastToken.raw += '\\n' + token.raw;\r\n            lastToken.text += '\\n' + token.text;\r\n          }\r\n\r\n          continue;\r\n        } // fences\r\n\r\n\r\n        if (token = this.tokenizer.fences(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // heading\r\n\r\n\r\n        if (token = this.tokenizer.heading(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // table no leading pipe (gfm)\r\n\r\n\r\n        if (token = this.tokenizer.nptable(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // hr\r\n\r\n\r\n        if (token = this.tokenizer.hr(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // blockquote\r\n\r\n\r\n        if (token = this.tokenizer.blockquote(src)) {\r\n          src = src.substring(token.raw.length);\r\n          token.tokens = this.blockTokens(token.text, [], top);\r\n          tokens.push(token);\r\n          continue;\r\n        } // list\r\n\r\n\r\n        if (token = this.tokenizer.list(src)) {\r\n          src = src.substring(token.raw.length);\r\n          l = token.items.length;\r\n\r\n          for (i = 0; i < l; i++) {\r\n            token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);\r\n          }\r\n\r\n          tokens.push(token);\r\n          continue;\r\n        } // html\r\n\r\n\r\n        if (token = this.tokenizer.html(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // def\r\n\r\n\r\n        if (top && (token = this.tokenizer.def(src))) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (!this.tokens.links[token.tag]) {\r\n            this.tokens.links[token.tag] = {\r\n              href: token.href,\r\n              title: token.title\r\n            };\r\n          }\r\n\r\n          continue;\r\n        } // table (gfm)\r\n\r\n\r\n        if (token = this.tokenizer.table(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // lheading\r\n\r\n\r\n        if (token = this.tokenizer.lheading(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // top-level paragraph\r\n\r\n\r\n        if (top && (token = this.tokenizer.paragraph(src))) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // text\r\n\r\n\r\n        if (token = this.tokenizer.text(src, tokens)) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (token.type) {\r\n            tokens.push(token);\r\n          } else {\r\n            lastToken = tokens[tokens.length - 1];\r\n            lastToken.raw += '\\n' + token.raw;\r\n            lastToken.text += '\\n' + token.text;\r\n          }\r\n\r\n          continue;\r\n        }\r\n\r\n        if (src) {\r\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\r\n\r\n          if (this.options.silent) {\r\n            console.error(errMsg);\r\n            break;\r\n          } else {\r\n            throw new Error(errMsg);\r\n          }\r\n        }\r\n      }\r\n\r\n      return tokens;\r\n    };\r\n\r\n    _proto.inline = function inline(tokens) {\r\n      var i, j, k, l2, row, token;\r\n      var l = tokens.length;\r\n\r\n      for (i = 0; i < l; i++) {\r\n        token = tokens[i];\r\n\r\n        switch (token.type) {\r\n          case 'paragraph':\r\n          case 'text':\r\n          case 'heading':\r\n            {\r\n              token.tokens = [];\r\n              this.inlineTokens(token.text, token.tokens);\r\n              break;\r\n            }\r\n\r\n          case 'table':\r\n            {\r\n              token.tokens = {\r\n                header: [],\r\n                cells: []\r\n              }; // header\r\n\r\n              l2 = token.header.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                token.tokens.header[j] = [];\r\n                this.inlineTokens(token.header[j], token.tokens.header[j]);\r\n              } // cells\r\n\r\n\r\n              l2 = token.cells.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                row = token.cells[j];\r\n                token.tokens.cells[j] = [];\r\n\r\n                for (k = 0; k < row.length; k++) {\r\n                  token.tokens.cells[j][k] = [];\r\n                  this.inlineTokens(row[k], token.tokens.cells[j][k]);\r\n                }\r\n              }\r\n\r\n              break;\r\n            }\r\n\r\n          case 'blockquote':\r\n            {\r\n              this.inline(token.tokens);\r\n              break;\r\n            }\r\n\r\n          case 'list':\r\n            {\r\n              l2 = token.items.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                this.inline(token.items[j].tokens);\r\n              }\r\n\r\n              break;\r\n            }\r\n        }\r\n      }\r\n\r\n      return tokens;\r\n    }\r\n    /**\r\n     * Lexing/Compiling\r\n     */\r\n    ;\r\n\r\n    _proto.inlineTokens = function inlineTokens(src, tokens, inLink, inRawBlock) {\r\n      if (tokens === void 0) {\r\n        tokens = [];\r\n      }\r\n\r\n      if (inLink === void 0) {\r\n        inLink = false;\r\n      }\r\n\r\n      if (inRawBlock === void 0) {\r\n        inRawBlock = false;\r\n      }\r\n\r\n      var token;\r\n\r\n      while (src) {\r\n        // escape\r\n        if (token = this.tokenizer.escape(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // tag\r\n\r\n\r\n        if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {\r\n          src = src.substring(token.raw.length);\r\n          inLink = token.inLink;\r\n          inRawBlock = token.inRawBlock;\r\n          tokens.push(token);\r\n          continue;\r\n        } // link\r\n\r\n\r\n        if (token = this.tokenizer.link(src)) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (token.type === 'link') {\r\n            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\r\n          }\r\n\r\n          tokens.push(token);\r\n          continue;\r\n        } // reflink, nolink\r\n\r\n\r\n        if (token = this.tokenizer.reflink(src, this.tokens.links)) {\r\n          src = src.substring(token.raw.length);\r\n\r\n          if (token.type === 'link') {\r\n            token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);\r\n          }\r\n\r\n          tokens.push(token);\r\n          continue;\r\n        } // strong\r\n\r\n\r\n        if (token = this.tokenizer.strong(src)) {\r\n          src = src.substring(token.raw.length);\r\n          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\r\n          tokens.push(token);\r\n          continue;\r\n        } // em\r\n\r\n\r\n        if (token = this.tokenizer.em(src)) {\r\n          src = src.substring(token.raw.length);\r\n          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\r\n          tokens.push(token);\r\n          continue;\r\n        } // code\r\n\r\n\r\n        if (token = this.tokenizer.codespan(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // br\r\n\r\n\r\n        if (token = this.tokenizer.br(src)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // del (gfm)\r\n\r\n\r\n        if (token = this.tokenizer.del(src)) {\r\n          src = src.substring(token.raw.length);\r\n          token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);\r\n          tokens.push(token);\r\n          continue;\r\n        } // autolink\r\n\r\n\r\n        if (token = this.tokenizer.autolink(src, mangle)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // url (gfm)\r\n\r\n\r\n        if (!inLink && (token = this.tokenizer.url(src, mangle))) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        } // text\r\n\r\n\r\n        if (token = this.tokenizer.inlineText(src, inRawBlock, smartypants)) {\r\n          src = src.substring(token.raw.length);\r\n          tokens.push(token);\r\n          continue;\r\n        }\r\n\r\n        if (src) {\r\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\r\n\r\n          if (this.options.silent) {\r\n            console.error(errMsg);\r\n            break;\r\n          } else {\r\n            throw new Error(errMsg);\r\n          }\r\n        }\r\n      }\r\n\r\n      return tokens;\r\n    };\r\n\r\n    _createClass(Lexer, null, [{\r\n      key: \"rules\",\r\n      get: function get() {\r\n        return {\r\n          block: block$1,\r\n          inline: inline$1\r\n        };\r\n      }\r\n    }]);\r\n\r\n    return Lexer;\r\n  }();\r\n\r\n  var defaults$3 = defaults.defaults;\r\n  var cleanUrl$1 = helpers.cleanUrl,\r\n      escape$1 = helpers.escape;\r\n  /**\r\n   * Renderer\r\n   */\r\n\r\n  var Renderer_1 = /*#__PURE__*/function () {\r\n    function Renderer(options) {\r\n      this.options = options || defaults$3;\r\n    }\r\n\r\n    var _proto = Renderer.prototype;\r\n\r\n    _proto.code = function code(_code, infostring, escaped) {\r\n      var lang = (infostring || '').match(/\\S*/)[0];\r\n\r\n      if (this.options.highlight) {\r\n        var out = this.options.highlight(_code, lang);\r\n\r\n        if (out != null && out !== _code) {\r\n          escaped = true;\r\n          _code = out;\r\n        }\r\n      }\r\n\r\n      if (!lang) {\r\n        return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\r\n      }\r\n\r\n      return '<pre><code class=\"' + this.options.langPrefix + escape$1(lang, true) + '\">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\r\n    };\r\n\r\n    _proto.blockquote = function blockquote(quote) {\r\n      return '<blockquote>\\n' + quote + '</blockquote>\\n';\r\n    };\r\n\r\n    _proto.html = function html(_html) {\r\n      return _html;\r\n    };\r\n\r\n    _proto.heading = function heading(text, level, raw, slugger) {\r\n      if (this.options.headerIds) {\r\n        return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\r\n      } // ignore IDs\r\n\r\n\r\n      return '<h' + level + '>' + text + '</h' + level + '>\\n';\r\n    };\r\n\r\n    _proto.hr = function hr() {\r\n      return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\r\n    };\r\n\r\n    _proto.list = function list(body, ordered, start) {\r\n      var type = ordered ? 'ol' : 'ul',\r\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\r\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\r\n    };\r\n\r\n    _proto.listitem = function listitem(text) {\r\n      return '<li>' + text + '</li>\\n';\r\n    };\r\n\r\n    _proto.checkbox = function checkbox(checked) {\r\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\r\n    };\r\n\r\n    _proto.paragraph = function paragraph(text) {\r\n      return '<p>' + text + '</p>\\n';\r\n    };\r\n\r\n    _proto.table = function table(header, body) {\r\n      if (body) body = '<tbody>' + body + '</tbody>';\r\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\r\n    };\r\n\r\n    _proto.tablerow = function tablerow(content) {\r\n      return '<tr>\\n' + content + '</tr>\\n';\r\n    };\r\n\r\n    _proto.tablecell = function tablecell(content, flags) {\r\n      var type = flags.header ? 'th' : 'td';\r\n      var tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\r\n      return tag + content + '</' + type + '>\\n';\r\n    } // span level renderer\r\n    ;\r\n\r\n    _proto.strong = function strong(text) {\r\n      return '<strong>' + text + '</strong>';\r\n    };\r\n\r\n    _proto.em = function em(text) {\r\n      return '<em>' + text + '</em>';\r\n    };\r\n\r\n    _proto.codespan = function codespan(text) {\r\n      return '<code>' + text + '</code>';\r\n    };\r\n\r\n    _proto.br = function br() {\r\n      return this.options.xhtml ? '<br/>' : '<br>';\r\n    };\r\n\r\n    _proto.del = function del(text) {\r\n      return '<del>' + text + '</del>';\r\n    };\r\n\r\n    _proto.link = function link(href, title, text) {\r\n      href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);\r\n\r\n      if (href === null) {\r\n        return text;\r\n      }\r\n\r\n      var out = '<a href=\"' + escape$1(href) + '\"';\r\n\r\n      if (title) {\r\n        out += ' title=\"' + title + '\"';\r\n      }\r\n\r\n      out += '>' + text + '</a>';\r\n      return out;\r\n    };\r\n\r\n    _proto.image = function image(href, title, text) {\r\n      href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);\r\n\r\n      if (href === null) {\r\n        return text;\r\n      }\r\n\r\n      var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\r\n\r\n      if (title) {\r\n        out += ' title=\"' + title + '\"';\r\n      }\r\n\r\n      out += this.options.xhtml ? '/>' : '>';\r\n      return out;\r\n    };\r\n\r\n    _proto.text = function text(_text) {\r\n      return _text;\r\n    };\r\n\r\n    return Renderer;\r\n  }();\r\n\r\n  /**\r\n   * TextRenderer\r\n   * returns only the textual part of the token\r\n   */\r\n  var TextRenderer_1 = /*#__PURE__*/function () {\r\n    function TextRenderer() {}\r\n\r\n    var _proto = TextRenderer.prototype;\r\n\r\n    // no need for block level renderers\r\n    _proto.strong = function strong(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.em = function em(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.codespan = function codespan(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.del = function del(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.html = function html(text) {\r\n      return text;\r\n    };\r\n\r\n    _proto.text = function text(_text) {\r\n      return _text;\r\n    };\r\n\r\n    _proto.link = function link(href, title, text) {\r\n      return '' + text;\r\n    };\r\n\r\n    _proto.image = function image(href, title, text) {\r\n      return '' + text;\r\n    };\r\n\r\n    _proto.br = function br() {\r\n      return '';\r\n    };\r\n\r\n    return TextRenderer;\r\n  }();\r\n\r\n  /**\r\n   * Slugger generates header id\r\n   */\r\n  var Slugger_1 = /*#__PURE__*/function () {\r\n    function Slugger() {\r\n      this.seen = {};\r\n    }\r\n    /**\r\n     * Convert string to unique id\r\n     */\r\n\r\n\r\n    var _proto = Slugger.prototype;\r\n\r\n    _proto.slug = function slug(value) {\r\n      var slug = value.toLowerCase().trim() // remove html tags\r\n      .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\r\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\r\n\r\n      if (this.seen.hasOwnProperty(slug)) {\r\n        var originalSlug = slug;\r\n\r\n        do {\r\n          this.seen[originalSlug]++;\r\n          slug = originalSlug + '-' + this.seen[originalSlug];\r\n        } while (this.seen.hasOwnProperty(slug));\r\n      }\r\n\r\n      this.seen[slug] = 0;\r\n      return slug;\r\n    };\r\n\r\n    return Slugger;\r\n  }();\r\n\r\n  var defaults$4 = defaults.defaults;\r\n  var unescape$1 = helpers.unescape;\r\n  /**\r\n   * Parsing & Compiling\r\n   */\r\n\r\n  var Parser_1 = /*#__PURE__*/function () {\r\n    function Parser(options) {\r\n      this.options = options || defaults$4;\r\n      this.options.renderer = this.options.renderer || new Renderer_1();\r\n      this.renderer = this.options.renderer;\r\n      this.renderer.options = this.options;\r\n      this.textRenderer = new TextRenderer_1();\r\n      this.slugger = new Slugger_1();\r\n    }\r\n    /**\r\n     * Static Parse Method\r\n     */\r\n\r\n\r\n    Parser.parse = function parse(tokens, options) {\r\n      var parser = new Parser(options);\r\n      return parser.parse(tokens);\r\n    }\r\n    /**\r\n     * Parse Loop\r\n     */\r\n    ;\r\n\r\n    var _proto = Parser.prototype;\r\n\r\n    _proto.parse = function parse(tokens, top) {\r\n      if (top === void 0) {\r\n        top = true;\r\n      }\r\n\r\n      var out = '',\r\n          i,\r\n          j,\r\n          k,\r\n          l2,\r\n          l3,\r\n          row,\r\n          cell,\r\n          header,\r\n          body,\r\n          token,\r\n          ordered,\r\n          start,\r\n          loose,\r\n          itemBody,\r\n          item,\r\n          checked,\r\n          task,\r\n          checkbox;\r\n      var l = tokens.length;\r\n\r\n      for (i = 0; i < l; i++) {\r\n        token = tokens[i];\r\n\r\n        switch (token.type) {\r\n          case 'space':\r\n            {\r\n              continue;\r\n            }\r\n\r\n          case 'hr':\r\n            {\r\n              out += this.renderer.hr();\r\n              continue;\r\n            }\r\n\r\n          case 'heading':\r\n            {\r\n              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape$1(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\r\n              continue;\r\n            }\r\n\r\n          case 'code':\r\n            {\r\n              out += this.renderer.code(token.text, token.lang, token.escaped);\r\n              continue;\r\n            }\r\n\r\n          case 'table':\r\n            {\r\n              header = ''; // header\r\n\r\n              cell = '';\r\n              l2 = token.header.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                cell += this.renderer.tablecell(this.parseInline(token.tokens.header[j]), {\r\n                  header: true,\r\n                  align: token.align[j]\r\n                });\r\n              }\r\n\r\n              header += this.renderer.tablerow(cell);\r\n              body = '';\r\n              l2 = token.cells.length;\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                row = token.tokens.cells[j];\r\n                cell = '';\r\n                l3 = row.length;\r\n\r\n                for (k = 0; k < l3; k++) {\r\n                  cell += this.renderer.tablecell(this.parseInline(row[k]), {\r\n                    header: false,\r\n                    align: token.align[k]\r\n                  });\r\n                }\r\n\r\n                body += this.renderer.tablerow(cell);\r\n              }\r\n\r\n              out += this.renderer.table(header, body);\r\n              continue;\r\n            }\r\n\r\n          case 'blockquote':\r\n            {\r\n              body = this.parse(token.tokens);\r\n              out += this.renderer.blockquote(body);\r\n              continue;\r\n            }\r\n\r\n          case 'list':\r\n            {\r\n              ordered = token.ordered;\r\n              start = token.start;\r\n              loose = token.loose;\r\n              l2 = token.items.length;\r\n              body = '';\r\n\r\n              for (j = 0; j < l2; j++) {\r\n                item = token.items[j];\r\n                checked = item.checked;\r\n                task = item.task;\r\n                itemBody = '';\r\n\r\n                if (item.task) {\r\n                  checkbox = this.renderer.checkbox(checked);\r\n\r\n                  if (loose) {\r\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'text') {\r\n                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\r\n\r\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\r\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\r\n                      }\r\n                    } else {\r\n                      item.tokens.unshift({\r\n                        type: 'text',\r\n                        text: checkbox\r\n                      });\r\n                    }\r\n                  } else {\r\n                    itemBody += checkbox;\r\n                  }\r\n                }\r\n\r\n                itemBody += this.parse(item.tokens, loose);\r\n                body += this.renderer.listitem(itemBody, task, checked);\r\n              }\r\n\r\n              out += this.renderer.list(body, ordered, start);\r\n              continue;\r\n            }\r\n\r\n          case 'html':\r\n            {\r\n              // TODO parse inline content if parameter markdown=1\r\n              out += this.renderer.html(token.text);\r\n              continue;\r\n            }\r\n\r\n          case 'paragraph':\r\n            {\r\n              out += this.renderer.paragraph(this.parseInline(token.tokens));\r\n              continue;\r\n            }\r\n\r\n          case 'text':\r\n            {\r\n              body = token.tokens ? this.parseInline(token.tokens) : token.text;\r\n\r\n              while (i + 1 < l && tokens[i + 1].type === 'text') {\r\n                token = tokens[++i];\r\n                body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\r\n              }\r\n\r\n              out += top ? this.renderer.paragraph(body) : body;\r\n              continue;\r\n            }\r\n\r\n          default:\r\n            {\r\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\r\n\r\n              if (this.options.silent) {\r\n                console.error(errMsg);\r\n                return;\r\n              } else {\r\n                throw new Error(errMsg);\r\n              }\r\n            }\r\n        }\r\n      }\r\n\r\n      return out;\r\n    }\r\n    /**\r\n     * Parse Inline Tokens\r\n     */\r\n    ;\r\n\r\n    _proto.parseInline = function parseInline(tokens, renderer) {\r\n      renderer = renderer || this.renderer;\r\n      var out = '',\r\n          i,\r\n          token;\r\n      var l = tokens.length;\r\n\r\n      for (i = 0; i < l; i++) {\r\n        token = tokens[i];\r\n\r\n        switch (token.type) {\r\n          case 'escape':\r\n            {\r\n              out += renderer.text(token.text);\r\n              break;\r\n            }\r\n\r\n          case 'html':\r\n            {\r\n              out += renderer.html(token.text);\r\n              break;\r\n            }\r\n\r\n          case 'link':\r\n            {\r\n              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\r\n              break;\r\n            }\r\n\r\n          case 'image':\r\n            {\r\n              out += renderer.image(token.href, token.title, token.text);\r\n              break;\r\n            }\r\n\r\n          case 'strong':\r\n            {\r\n              out += renderer.strong(this.parseInline(token.tokens, renderer));\r\n              break;\r\n            }\r\n\r\n          case 'em':\r\n            {\r\n              out += renderer.em(this.parseInline(token.tokens, renderer));\r\n              break;\r\n            }\r\n\r\n          case 'codespan':\r\n            {\r\n              out += renderer.codespan(token.text);\r\n              break;\r\n            }\r\n\r\n          case 'br':\r\n            {\r\n              out += renderer.br();\r\n              break;\r\n            }\r\n\r\n          case 'del':\r\n            {\r\n              out += renderer.del(this.parseInline(token.tokens, renderer));\r\n              break;\r\n            }\r\n\r\n          case 'text':\r\n            {\r\n              out += renderer.text(token.text);\r\n              break;\r\n            }\r\n\r\n          default:\r\n            {\r\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\r\n\r\n              if (this.options.silent) {\r\n                console.error(errMsg);\r\n                return;\r\n              } else {\r\n                throw new Error(errMsg);\r\n              }\r\n            }\r\n        }\r\n      }\r\n\r\n      return out;\r\n    };\r\n\r\n    return Parser;\r\n  }();\r\n\r\n  var merge$2 = helpers.merge,\r\n      checkSanitizeDeprecation$1 = helpers.checkSanitizeDeprecation,\r\n      escape$2 = helpers.escape;\r\n  var getDefaults = defaults.getDefaults,\r\n      changeDefaults = defaults.changeDefaults,\r\n      defaults$5 = defaults.defaults;\r\n  /**\r\n   * Marked\r\n   */\r\n\r\n  function marked(src, opt, callback) {\r\n    // throw error in case of non string input\r\n    if (typeof src === 'undefined' || src === null) {\r\n      throw new Error('marked(): input parameter is undefined or null');\r\n    }\r\n\r\n    if (typeof src !== 'string') {\r\n      throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\r\n    }\r\n\r\n    if (typeof opt === 'function') {\r\n      callback = opt;\r\n      opt = null;\r\n    }\r\n\r\n    opt = merge$2({}, marked.defaults, opt || {});\r\n    checkSanitizeDeprecation$1(opt);\r\n\r\n    if (callback) {\r\n      var highlight = opt.highlight;\r\n      var tokens;\r\n\r\n      try {\r\n        tokens = Lexer_1.lex(src, opt);\r\n      } catch (e) {\r\n        return callback(e);\r\n      }\r\n\r\n      var done = function done(err) {\r\n        var out;\r\n\r\n        if (!err) {\r\n          try {\r\n            out = Parser_1.parse(tokens, opt);\r\n          } catch (e) {\r\n            err = e;\r\n          }\r\n        }\r\n\r\n        opt.highlight = highlight;\r\n        return err ? callback(err) : callback(null, out);\r\n      };\r\n\r\n      if (!highlight || highlight.length < 3) {\r\n        return done();\r\n      }\r\n\r\n      delete opt.highlight;\r\n      if (!tokens.length) return done();\r\n      var pending = 0;\r\n      marked.walkTokens(tokens, function (token) {\r\n        if (token.type === 'code') {\r\n          pending++;\r\n          highlight(token.text, token.lang, function (err, code) {\r\n            if (err) {\r\n              return done(err);\r\n            }\r\n\r\n            if (code != null && code !== token.text) {\r\n              token.text = code;\r\n              token.escaped = true;\r\n            }\r\n\r\n            pending--;\r\n\r\n            if (pending === 0) {\r\n              done();\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      if (pending === 0) {\r\n        done();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    try {\r\n      var _tokens = Lexer_1.lex(src, opt);\r\n\r\n      if (opt.walkTokens) {\r\n        marked.walkTokens(_tokens, opt.walkTokens);\r\n      }\r\n\r\n      return Parser_1.parse(_tokens, opt);\r\n    } catch (e) {\r\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\r\n\r\n      if (opt.silent) {\r\n        return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';\r\n      }\r\n\r\n      throw e;\r\n    }\r\n  }\r\n  /**\r\n   * Options\r\n   */\r\n\r\n\r\n  marked.options = marked.setOptions = function (opt) {\r\n    merge$2(marked.defaults, opt);\r\n    changeDefaults(marked.defaults);\r\n    return marked;\r\n  };\r\n\r\n  marked.getDefaults = getDefaults;\r\n  marked.defaults = defaults$5;\r\n  /**\r\n   * Use Extension\r\n   */\r\n\r\n  marked.use = function (extension) {\r\n    var opts = merge$2({}, extension);\r\n\r\n    if (extension.renderer) {\r\n      (function () {\r\n        var renderer = marked.defaults.renderer || new Renderer_1();\r\n\r\n        var _loop = function _loop(prop) {\r\n          var prevRenderer = renderer[prop];\r\n\r\n          renderer[prop] = function () {\r\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n              args[_key] = arguments[_key];\r\n            }\r\n\r\n            var ret = extension.renderer[prop].apply(renderer, args);\r\n\r\n            if (ret === false) {\r\n              ret = prevRenderer.apply(renderer, args);\r\n            }\r\n\r\n            return ret;\r\n          };\r\n        };\r\n\r\n        for (var prop in extension.renderer) {\r\n          _loop(prop);\r\n        }\r\n\r\n        opts.renderer = renderer;\r\n      })();\r\n    }\r\n\r\n    if (extension.tokenizer) {\r\n      (function () {\r\n        var tokenizer = marked.defaults.tokenizer || new Tokenizer_1();\r\n\r\n        var _loop2 = function _loop2(prop) {\r\n          var prevTokenizer = tokenizer[prop];\r\n\r\n          tokenizer[prop] = function () {\r\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n              args[_key2] = arguments[_key2];\r\n            }\r\n\r\n            var ret = extension.tokenizer[prop].apply(tokenizer, args);\r\n\r\n            if (ret === false) {\r\n              ret = prevTokenizer.apply(tokenizer, args);\r\n            }\r\n\r\n            return ret;\r\n          };\r\n        };\r\n\r\n        for (var prop in extension.tokenizer) {\r\n          _loop2(prop);\r\n        }\r\n\r\n        opts.tokenizer = tokenizer;\r\n      })();\r\n    }\r\n\r\n    if (extension.walkTokens) {\r\n      var walkTokens = marked.defaults.walkTokens;\r\n\r\n      opts.walkTokens = function (token) {\r\n        extension.walkTokens(token);\r\n\r\n        if (walkTokens) {\r\n          walkTokens(token);\r\n        }\r\n      };\r\n    }\r\n\r\n    marked.setOptions(opts);\r\n  };\r\n  /**\r\n   * Run callback for every token\r\n   */\r\n\r\n\r\n  marked.walkTokens = function (tokens, callback) {\r\n    for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\r\n      var token = _step.value;\r\n      callback(token);\r\n\r\n      switch (token.type) {\r\n        case 'table':\r\n          {\r\n            for (var _iterator2 = _createForOfIteratorHelperLoose(token.tokens.header), _step2; !(_step2 = _iterator2()).done;) {\r\n              var cell = _step2.value;\r\n              marked.walkTokens(cell, callback);\r\n            }\r\n\r\n            for (var _iterator3 = _createForOfIteratorHelperLoose(token.tokens.cells), _step3; !(_step3 = _iterator3()).done;) {\r\n              var row = _step3.value;\r\n\r\n              for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {\r\n                var _cell = _step4.value;\r\n                marked.walkTokens(_cell, callback);\r\n              }\r\n            }\r\n\r\n            break;\r\n          }\r\n\r\n        case 'list':\r\n          {\r\n            marked.walkTokens(token.items, callback);\r\n            break;\r\n          }\r\n\r\n        default:\r\n          {\r\n            if (token.tokens) {\r\n              marked.walkTokens(token.tokens, callback);\r\n            }\r\n          }\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Expose\r\n   */\r\n\r\n\r\n  marked.Parser = Parser_1;\r\n  marked.parser = Parser_1.parse;\r\n  marked.Renderer = Renderer_1;\r\n  marked.TextRenderer = TextRenderer_1;\r\n  marked.Lexer = Lexer_1;\r\n  marked.lexer = Lexer_1.lex;\r\n  marked.Tokenizer = Tokenizer_1;\r\n  marked.Slugger = Slugger_1;\r\n  marked.parse = marked;\r\n  var marked_1 = marked;\r\n\r\n  return marked_1;\r\n\r\n})));\r\n\n\n//# sourceURL=webpack:///./node_modules/marked/lib/marked.js?");

/***/ }),

/***/ "./src/index/Index.ts":
/*!****************************!*\
  !*** ./src/index/Index.ts ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! marked */ \"./node_modules/marked/lib/marked.js\");\n/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(marked__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _MANUAL_md__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MANUAL.md */ \"./src/index/MANUAL.md\");\n\r\n\r\n/**\r\n * index.htmlのエントリーポイント。\r\n * テレプレゼンス先のリンクやREADME.mdの内容を表示する。\r\n */\r\nfunction main() {\r\n    window.onload = () => {\r\n        const html = marked__WEBPACK_IMPORTED_MODULE_0___default()(_MANUAL_md__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\r\n        const callButton1 = document.getElementById(\"call-button1\");\r\n        const callButton2 = document.getElementById(\"call-button2\");\r\n        const readmeDiv = document.getElementById(\"readme\");\r\n        callButton1.addEventListener(\"click\", () => {\r\n            window.location.href = \"./operator.html\" + \"?\" + \"Telubee\";\r\n        });\r\n        callButton2.addEventListener(\"click\", () => {\r\n            window.location.href = \"./operator.html\" + \"?\" + \"Mk2\";\r\n        });\r\n        readmeDiv.insertAdjacentHTML(\"afterbegin\", html);\r\n    };\r\n}\r\nmain();\r\n\n\n//# sourceURL=webpack:///./src/index/Index.ts?");

/***/ }),

/***/ "./src/index/MANUAL.md":
/*!*****************************!*\
  !*** ./src/index/MANUAL.md ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"# CommunicationRobot\\r\\n- 以下を読んでから入ってください\\r\\n\\r\\n## 対応ブラウザ\\r\\n### 各環境の推奨ブラウザ\\r\\n- FireFox(PC版)\\r\\n- FireFoxReality(モバイル版/VR版)\\r\\n\\r\\n### PC(OculusRiftS)\\r\\n- FireFox(バージョン77.0.1対応)\\r\\n\\r\\n### Oculus Go/Oculus Quest\\r\\n- OculusBrowser(バージョン9.3.0.1.142.218794212対応)\\r\\n- FireFoxReality(10.5対応)\\r\\n\\r\\n### HTC Vive Focus Plus\\r\\n- FireFoxReality(10.2対応)\\r\\n\\r\\n### HTC Vive Focus Plus\\r\\n- FireFoxReality(10.2対応)\\r\\n\\r\\n### Android\\r\\n- Chrome(バージョン83.0.4103.106対応)\\r\\n\\r\\n## 動作スペック\\r\\n- OculusQuestが推奨スペック\\r\\n- VRReadyPCなら安定動作\\r\\n\\r\\n## 通信環境\\r\\n- 有線が望ましい\\r\\n- 無線を利用する場合はできる限り高速なWiFiルーターを利用すること\\r\\n\\r\\n## 音量調節\\r\\n- 双方向に音声のやり取りをするため、事前に音量調節を行っておくこと\\r\\n- また、遷移先のページ内は常に音声でつながっているので、終了するときはそのページから離脱すること\\r\\n\\r\\n## 注意事項\\r\\n- Telubeeに入るときは正面を向いた状態で入ること\\r\\n- ロボットの首は正面から上下左右それぞれ90度までしか回らない\\r\\n  - 90度以上回るような視点の移動はVR酔いを誘発するため注意\\r\\n\\r\\n## 使い方\\r\\n1. https://telexistence.github.io/CommunicationRobot/ にアクセス\\r\\n1. 「Telubeeに入る」(ページ上部)をクリック or タップ\\r\\n1. マイクの使用に関する許可が求められるので許可\\r\\n1. WebXRの使用に関する許可 or GoogleVRサービスのインストールなどが求められるので許可/インストール(一部ブラウザでは許可後リロードが必要な場合あり)\\r\\n1. 画面右下に「VR」のマークが出るのでクリックorタップ\\r\\n1. 完了\\r\\n\\r\\n## 備考\\r\\n- 基本的にはH264コーデック対応端末での利用が望ましい\\r\\n  - 非対応の場合、VP8での接続になる\\r\\n- 他者がテレイグしている際は接続できない\");\n\n//# sourceURL=webpack:///./src/index/MANUAL.md?");

/***/ })

/******/ });